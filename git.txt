
* To synchronize your work with a given remote, you run a git fetch <remote> command
* Remote-tracking branch names take the form <remote>/<branch>. E.g. the remove default branch 'origin/master' vs the local branch 'master'

* Git has three levels of configuration files:
  
  1. System level (/etc/gitconfig): Contains values for every user on the system and all their repositories.
  2. Global level (~/.gitconfig or ~/.config/git/config): Specific to your user and is used across all of your repositories.
  3. Local level (.git/config in the current repository): Specific to the current repository.


* Using git stash:

  -> git stash
  -> git pull
  -> git stash pop
  
  
  
* Create a new branch and switch to it:

git branch 26762_bug_about_office
git checkout 26762_bug_about_office
    


* Pull from main to test

git pull origin main


git clone git@github.com:CIOIL/govil8.git
cd govil8/
git checkout test
git merge origin/main
git push



* create a pr from some commits not all (if 2 branches created one by one)

# you have to start from main so that git will recognize a change between 2 LOCAL branches
git checkout main
git pull origin main

# after updating the main branch create a temp branch
git checkout -b temp_branch

# add the commits you want to cherry pick to the temp_branch
git add ...
git commit ...

# now go back to the main branch and then create a brand new branch based on IT so that changes will exist between main and temp_branch
git checkout main
git checkout -b my_real_branch

# choose the commit hashes you want to include in the branch

git log
git cherry-pick commit_1 commit_2

# push the changes to the branch to create a pr with the specific commits
git push


* undo commits (keeps the changes in the files and only resets git status)

NUM_OF_COMMITS=5

git reset HEAD~${NUM_OF_COMMITS}




* checkout all modified

git ls-files --modified | xargs git checkout



* check status of a problematic file

git ls-files -v | grep sites/default/config/sync/system.logging.yml











